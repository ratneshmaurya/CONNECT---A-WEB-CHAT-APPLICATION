{"version":3,"sources":["firebase.js","SidebarChat.jsx","StateProvider.js","Sidebar.js","Chat.js","Login.jsx","App.jsx","Reducer.js","index.js"],"names":["initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getFirestore","auth","getAuth","provider","GoogleAuthProvider","SidebarChat","id","name","addNewChat","useState","seed","setseed","lastMessages","setLastMessages","useEffect","Math","floor","random","docref","doc","docInCollectionRef","collection","q","query","orderBy","onSnapshot","snap","docs","map","message","data","onClick","roomName","prompt","addDoc","className","to","Avatar","src","length","substring","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","rooms","setRooms","colRef","unsubsCol","snapshot","searchValue","setSearchValue","user","photoURL","displayName","IconButton","e","signOut","placeholder","type","onChange","target","filter","val","toLowerCase","includes","room","Chat","roomId","useParams","setRoomName","messages","setMessages","docRef","exists","inputValue","SetInput","password","setPassword","passValue","setPassValue","countMessageByUser","setcountMessageByUser","messagesEndRef","useRef","current","scrollIntoView","Date","timestamp","seconds","toLocaleTimeString","i","ref","preventDefault","serverTimestamp","passwordByUser","alert","Login","dispatch","alt","Button","signInWithPopup","then","result","catch","error","App","onAuthStateChanged","path","element","state","action","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.feea7d45.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\"\r\nimport {getFirestore ,collection,getDocs,addDoc} from 'firebase/firestore';\r\nimport {getAuth ,GoogleAuthProvider} from \"firebase/auth\";\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyA1J1lmcvfe1SqIpZVKOJrGTWHWskRQo3w\",\r\n    authDomain: \"whatsapp-clone-ace42.firebaseapp.com\",\r\n    projectId: \"whatsapp-clone-ace42\",\r\n    storageBucket: \"whatsapp-clone-ace42.appspot.com\",\r\n    messagingSenderId: \"420365674545\",\r\n    appId: \"1:420365674545:web:4cd6168444092c76208d10\",\r\n    measurementId: \"G-WTY20RGD57\"\r\n  };\r\n\r\ninitializeApp(firebaseConfig); //for initialising app with firebaseConfig files\r\nconst db = getFirestore(); //instance for handling database queries\r\nconst auth=getAuth();\r\nconst provider = new GoogleAuthProvider();\r\n\r\nexport {collection,getDocs,addDoc,auth,provider};\r\nexport default db;","import { Avatar } from '@mui/material'\r\nimport React, { useEffect, useState } from 'react'\r\nimport {collection,addDoc} from './firebase'\r\nimport './SidebarChat.css' ;\r\nimport db from './firebase';\r\nimport {Link} from \"react-router-dom\";\r\nimport { doc, onSnapshot, orderBy, query } from 'firebase/firestore';\r\nfunction SidebarChat({id ,name,addNewChat}) {\r\n    //we are getting roomId of each caht as the prop name id from sidebar component\r\n\r\n    const [seed,setseed]=useState(\"\");\r\n    const [lastMessages,setLastMessages]=useState([]);\r\n\r\n    //isme hum avatar ke liye value and lastMessages ka array bna rhe(to show last message in the sidebarchat)\r\n    useEffect(()=>{\r\n        setseed(Math.floor(Math.random()*500));\r\n\r\n        //for last message\r\n        if(id)  //as when i console the id , it is showing also some undefined value , becoz the sidebarChat component also runs when addNewCHat protion comes , and during that id will not be passed thus having undefined value for id;\r\n        {\r\n        const docref=doc(db,\"rooms\",id);\r\n        const docInCollectionRef=collection(docref,\"message\");\r\n            const q=query(docInCollectionRef,orderBy(\"timestamp\",\"desc\"));\r\n            onSnapshot(q,(snap)=>{\r\n                    setLastMessages(snap.docs.map((message)=>\r\n                    message.data()));\r\n            })\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[]);\r\n\r\n    const createChat=()=>{\r\n        const roomName=prompt(\"Please add the room name for chat\");\r\n        // if enter the room name then do something (agr blank choda promp me toh database me na add kre)\r\n        if(roomName){\r\n            addDoc(collection(db,'rooms'),{\r\n                name:roomName\r\n            })\r\n        }\r\n    };\r\n    \r\n    return !addNewChat ?(\r\n        <Link to={`/room/${id}`}>\r\n            <div className=\"sidebarChat\">\r\n               <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`}/>\r\n                <div className=\"sidebarChat__info\">\r\n                    <h2>{name}</h2>  {/*getting name from sidebar props , don't confuse */}\r\n\r\n                    {/* if message length >20 then show truncated length */}\r\n                    <p>{lastMessages[0]?.message.length>20 ? `${lastMessages[0]?.message.substring(0,20)}....`:lastMessages[0]?.message }</p>\r\n                </div>   \r\n            </div>\r\n        </Link>\r\n        \r\n        ) :(\r\n        <div onClick={createChat} className=\"sidebarChat\"> \r\n            <h2>Add new chat</h2>\r\n        </div>\r\n        //if add new chatt hoga toh clicked hokrr hi aaya hoga\r\n    )\r\n}\r\n\r\nexport default SidebarChat\r\n","import React,{createContext ,useContext,useReducer} from \"react\";\r\n\r\n// import reducer,{initialState} from \"./Reducer\";\r\n\r\nexport const StateContext=createContext(); //helps in creating data layer box\r\n\r\n\r\n//we are making the provider definition here \r\nexport const StateProvider=({reducer,initialState,children})=>(\r\n\r\n    //now what is our provider ? , it is our children\r\n    <StateContext.Provider value={useReducer(reducer,initialState)}>\r\n        {children}  {/* our app ,entire app hoga ye*/}\r\n    </StateContext.Provider>\r\n)\r\n\r\n//allows us to pull info from data layer\r\n//useState is our own hook \r\n//use of useContext here\r\nexport const useStateValue=()=>useContext(StateContext);\r\n","import React ,{useEffect,useState}from 'react'\r\nimport \"./Sidebar.css\";\r\nimport {Avatar,IconButton} from \"@mui/material\";\r\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\r\nimport SearchOutlinedIcon from '@mui/icons-material/SearchOutlined';\r\nimport SidebarChat from './SidebarChat'; //component for chatheads on left side\r\n\r\n\r\n\r\nimport db, { auth } from './firebase';\r\nimport { collection,onSnapshot } from 'firebase/firestore';\r\nimport { useStateValue } from './StateProvider';\r\nimport { signOut } from 'firebase/auth'; //i am using when user click profile pic , it gets logout\r\n\r\nfunction Sidebar() {\r\n\r\n    //------------firebase data concept\r\n    const [rooms, setRooms] = useState([]); //all the rooms or chat section from database\r\n    //run useeffect once only once the sidebar loads only \r\n    useEffect(() => {\r\n        const colRef=collection(db,'rooms');\r\n        const unsubsCol=onSnapshot(colRef,(snapshot)=>{\r\n            setRooms(snapshot.docs.map((doc)=>(\r\n                {\r\n                    id:doc.id, //giving the ID of doc , that will help in fetching the room name for chat header ,as we are passing this room id in form of props\r\n                    data:doc.data(),\r\n                }\r\n            )))\r\n        })\r\n\r\n        //a good practice is to use unsubscribe from listener when useEffect cleanup ho rha ho , i.e when finish using it , so that ye onSnapshot listener further listen na kre \r\n        return ()=> {\r\n            unsubsCol();\r\n        }\r\n    }, [])\r\n\r\n    //--------------------------------------\r\n    const [searchValue, setSearchValue] = useState(\"\"); //for stroing the search value text\r\n\r\n\r\n    const[{user},]=useStateValue(); //using our created data layer , in this page hum user ka pic le rhe\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <div className=\"sidebar__header\">\r\n\r\n                <div className=\"sidebar__headerLeft\">\r\n                <Avatar src={user.photoURL}/>\r\n                <div className='sidebar__username'>\r\n                    <h5>{user.displayName}</h5>\r\n                </div>\r\n                </div>\r\n\r\n                <div className=\"sidebar__headerRight\">\r\n                    <IconButton>{/* for having clickabe effect */}\r\n                    <div className='sidebar__headerRightDropDown'>\r\n                        <MoreVertIcon/>\r\n                        <div className='sidebar__headerRightDropDownMenu'>\r\n                            <p onClick={e=>signOut(auth)}>• Logout</p>\r\n                        </div>\r\n                    </div>\r\n                    </IconButton>\r\n                </div>\r\n                \r\n            </div>\r\n\r\n            <div className=\"sidebar__search\">\r\n                <div className=\"sidebar__searchContainer\">\r\n                    <SearchOutlinedIcon/>\r\n\r\n                    {/* here taking value from input and storing in variable searchValue to implement searching using filter function when showing all the rooms before mapping */}\r\n                    <input value={searchValue} placeholder=\"Let's Search or Chat\" type=\"text\" onChange={(e)=>{setSearchValue(e.target.value)}}></input>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"sidebar__chats\">\r\n                <SidebarChat addNewChat/>\r\n                {/* before showing direct mapping of room names , we first filter them on basis of seacrhed text then after filter we get an array on return , that array we will map further */}\r\n\r\n                {rooms.filter((val)=>{\r\n                    if(searchValue==\"\"){\r\n                        return val; //if nothing in search text then simply return all values\r\n                    }\r\n                    else if(val.data.name.toLowerCase().includes(searchValue.toLowerCase())){\r\n                        return val;\r\n                    }\r\n                }).map((room)=>(\r\n                    <SidebarChat key={room.id} id={room.id} name={room.data.name}/>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import React ,{useRef}from 'react'\r\nimport { Avatar ,IconButton } from '@mui/material';\r\nimport { useState,useEffect } from 'react';\r\nimport SearchOutlinedIcon from '@mui/icons-material/SearchOutlined';\r\nimport MoreVertOutlinedIcon from '@mui/icons-material/MoreVertOutlined';\r\n// import AttachFileOutlinedIcon from '@mui/icons-material/AttachFileOutlined';\r\n// import InsertEmoticonIcon from '@mui/icons-material/InsertEmoticon';\r\n// import MicIcon from '@mui/icons-material/Mic';\r\n\r\nimport \"./Chat.css\"\r\nimport { useParams } from 'react-router-dom';//for showing name of room after fetching roomId from URL and then fetching name of room from databse using that roomID\r\nimport {addDoc,collection,doc,onSnapshot, orderBy, query, serverTimestamp} from 'firebase/firestore';\r\nimport db from './firebase';\r\nimport { useStateValue } from './StateProvider';\r\n\r\nfunction Chat() {\r\n\r\n    //for showing name of room at top of chat screen after fetching roomId from URL and then fetching name of room from databse using that roomID\r\n    const {roomId}=useParams();\r\n    const [roomName,setRoomName]=useState(\"\");\r\n    const[messages,setMessages]=useState([]); // as it will contains all the messages of a rooms , hence it is an array\r\n    useEffect(()=>{\r\n        if(roomId){\r\n            \r\n            const docRef=doc(db,\"rooms\",roomId);\r\n            //this commented code also work as below snapshot code\r\n            // getDoc(docRef).then((doc)=>{\r\n            //     setRoomName(doc.data().name);\r\n            //     console.log(doc.data().name);\r\n            // })\r\n\r\n            //this is for showing names of group on the top\r\n            onSnapshot(docRef,(snapshot)=>{\r\n                //console.log(snapshot);\r\n                //exist kre tbhi , else docRef me undefined rhega to snapshot.data() error dega\r\n                if (snapshot.exists()) {\r\n                    setRoomName(snapshot.data().name);\r\n                }\r\n            })\r\n\r\n\r\n            //showing messages in the chat section of the room\r\n            const docref=doc(db,\"rooms\",roomId);\r\n            const docInCollectionRef=collection(docref,\"message\");\r\n            const q=query(docInCollectionRef,orderBy(\"timestamp\",\"asc\"));\r\n            onSnapshot(q,(snap)=>{\r\n                setMessages(snap.docs.map((message)=>\r\n                    message.data()\r\n                ));\r\n            })\r\n\r\n        }\r\n    },[roomId]);  //whenever the roomId change then useEffect runs\r\n\r\n\r\n    // for avatar changing\r\n    const [seed,setseed]=useState(\"\");\r\n    useEffect(()=>{\r\n        setseed(Math.floor(Math.random()*500));\r\n    },[]);\r\n\r\n    // this input variable stores the current message of user thet he entered and then we push this into database\r\n    const [inputValue,SetInput]=useState(\"\");\r\n\r\n    const [password,setPassword]=useState(\"\");//for actual password storing\r\n    const [passValue,setPassValue]=useState(\"\");//for storing password when user typed the wrong password and then entering anything again from input field;\r\n    const [countMessageByUser,setcountMessageByUser]=useState(0);//for storing number of message user entered\r\n\r\n    const sendMessage=(e)=>{\r\n        e.preventDefault(); //don't refresh\r\n\r\n        const docref=doc(db,\"rooms\",roomId); //getting ref of doc\r\n        //now adding a doc to this document itself (means docref is now a collection)\r\n        const docInCollectionRef=collection(docref,\"message\");\r\n            addDoc(docInCollectionRef,{\r\n                name:user.displayName,\r\n                message:inputValue,\r\n                timestamp:serverTimestamp(), //it will add the server time(which will be always same for all user and on showing to respective user , it will convert server time to their local time instead)\r\n                \r\n            })\r\n\r\n        SetInput(\"\"); /* erase input text fron input field after the use */\r\n\r\n        setcountMessageByUser(countMessageByUser + 1);\r\n\r\n        //if password is wrong or count message >=2\r\n        if(countMessageByUser >= 2 && password!==\"TACMP\"){\r\n            const passwordByUser=prompt(\"You have exhausted your free limit message (2 messages) qouta, please provide the password to extend the unlimited validity, ask password from - Developer Ratnesh\");\r\n\r\n            if(passwordByUser!==\"TACMP\"){\r\n                alert(\"You have entererd wrong password !!\");\r\n            }\r\n\r\n            //if user enter the rigth password then set the password var value and this helps him to message further\r\n            if(passwordByUser===\"TACMP\"){\r\n                setPassword(passwordByUser);\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    const [searchValue, setSearchValue] = useState(\"\"); //for stroing the search value text\r\n\r\n\r\n    //taking use of useRef hook , in order to scroll to bottom of message screen everytime , so that latest message dikhe saamne , scroll na krna pde neeche tk \r\n    const messagesEndRef = useRef(null);\r\n    useEffect(() => {\r\n        messagesEndRef.current?.scrollIntoView()\r\n      }, [messages]); //whenevr messages array updates , then our useRef hook come into play\r\n    \r\n\r\n    const [{user},]=useStateValue();\r\n\r\n    // const DeleteGroup=()=>{\r\n    //     const docref=doc(db,\"rooms\",roomId); //getting ref of doc\r\n    //     const docInCollectionRef=collection(docref,\"message\");\r\n    //     console.log(docInCollectionRef);\r\n    //     onSnapshot(docInCollectionRef,(querySnapshot)=>{\r\n    //         querySnapshot.forEach((docs)=>{\r\n    //             //console.log(docs.id)\r\n    //             //const docref2=doc(db,docInCollectionRef,docs.id);\r\n    //             //console.log(docref2);\r\n    //             //deleteDoc(docs);\r\n    //         })\r\n    //     }) \r\n\r\n    //     const docref=doc(db,\"rooms\",roomId);\r\n    //     const docInCollectionRef=collection(docref,\"message\");\r\n    //     const q=query(docInCollectionRef,orderBy(\"timestamp\",\"asc\"));\r\n    //     onSnapshot(q,(snap)=>{\r\n    //         setMessages(snap.docs.map((message)=>\r\n    //             deleteDoc(message)\r\n    //         ));\r\n    //     })\r\n    // }\r\n\r\n    // const ClearMessages=()=>{\r\n\r\n    // }\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n\r\n            <div className=\"chat__header\">\r\n                <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`}/>\r\n                <div className=\"chat__headerInfo\">\r\n                    <h2>{roomName}</h2>\r\n                    <p>last message at .. {new Date(messages[messages.length-1]?.timestamp?.seconds*1000).toLocaleTimeString()} </p>\r\n                    \r\n                </div>\r\n                <div className=\"chat__headerRight\">\r\n                    <IconButton> {/* for having clickabe effect */}\r\n                    <SearchOutlinedIcon/>\r\n                    </IconButton>\r\n                    <input value={searchValue} placeholder=\"Search the message\" type=\"text\" onChange={(e)=>{setSearchValue(e.target.value)}}></input>\r\n                    \r\n                    {/* <IconButton>\r\n                    <div className='chat__headerRightDropDown'>\r\n                        <MoreVertOutlinedIcon/>\r\n                        <div className='chat__headerRightDropDownMenu'>\r\n                            <p onClick={DeleteGroup}>• Delete Group</p>\r\n                            <p onClick={ClearMessages}>• Clear Messages</p>\r\n                        </div>\r\n                    </div>\r\n                    </IconButton> */}\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n            {/* showing the messages of the current room whose respective url is going on */}\r\n            <div className=\"chat__body\">\r\n            {\r\n               \r\n\r\n               \r\n                //using js codes inside html , hence using {} bracktes\r\n                messages.filter((val)=>{\r\n                    if(searchValue===\"\"){\r\n                        return val; //if nothing in search text then simply return all values\r\n                    }\r\n                    else if(val.message.toLowerCase().includes(searchValue.toLowerCase())){\r\n                        return val;\r\n                    }\r\n                }).map((message,i)=>(\r\n                    \r\n                    <>\r\n                    <p key={i} className={`chat__message ${user.displayName===message.name && \"chat__reciever\"}`}>\r\n                        <span className=\"chat__name\">{message.name }</span>\r\n                        {message.message}\r\n                        <span className=\"chat__timestamp\">\r\n                            {\r\n                                new Date(message.timestamp?.seconds*1000).toLocaleTimeString()\r\n                            }\r\n                        </span>\r\n\r\n                        <IconButton> {/* for having clickabe effect */}\r\n                        <MoreVertOutlinedIcon/>\r\n                        </IconButton>\r\n                    </p>\r\n                   \r\n                    <br key={i+1}/>\r\n                    </>\r\n                    //using <> becoze , we are returning more than one things from map , i.e , <p> and <br>\r\n                ))\r\n               \r\n            }\r\n\r\n            {/* here we are giving reference of this empty dummy div to useRef hook , to scroll to bottom on every message update */}\r\n            <div ref={messagesEndRef} />\r\n            </div>\r\n            \r\n\r\n            <div className=\"chat__footer\">\r\n                {/* <IconButton>\r\n                <InsertEmoticonIcon/>\r\n                </IconButton>\r\n\r\n                <IconButton>\r\n                    <AttachFileOutlinedIcon/>\r\n                </IconButton> */}\r\n\r\n                {/* now if user message count is less than 2, or if password is correct then only allow them to make messages */}\r\n\r\n                {\r\n                    (countMessageByUser<=2 || (countMessageByUser>2 && password===\"TACMP\")) &&\r\n                    <form>\r\n                        <input value={inputValue} onChange={(e)=>SetInput(e.target.value)} type=\"text\" placeholder=\"Type your convo\"/>\r\n                        <button onClick={sendMessage}>send</button>\r\n                    </form>\r\n                }\r\n\r\n                {/* if user entering wrong password then show him the enter password input field */}\r\n                {\r\n                    (countMessageByUser>2 && password!==\"TACMP\")&&\r\n                    <form>\r\n                        <input onChange={(e)=>setPassValue(e.target.value)} type=\"text\" placeholder=\"ENTER PASSWORD FIRST THEN U CAN SEND MORE MESSAGES\"/>\r\n                        <button onClick={(e)=>{\r\n                            setPassword(passValue) //setting password whatever user enters\r\n                            if(password!==\"TACMP\"){alert(\"You have entererd wrong password !!\");}\r\n                            e.preventDefault();//so that after submitting the page doesn't get refresh\r\n                            }}>send</button>\r\n                    </form>\r\n                }\r\n                \r\n\r\n                {/* <IconButton>\r\n                <MicIcon/>\r\n                </IconButton> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat;\r\n","import React from 'react';\r\nimport {Button} from \"@mui/material\";\r\n\r\nimport \"./Login.css\";\r\nimport {signInWithPopup} from \"firebase/auth\";\r\nimport { auth, provider } from './firebase';\r\nimport { useStateValue } from './StateProvider'; //to take value from our created data layer\r\nfunction Login() {\r\n    const[{},dispatch]=useStateValue(); //for pushing user into our created data layer\r\n\r\n    const signIn=()=>{\r\n        signInWithPopup(auth,provider).then((result) => {\r\n            dispatch({\r\n                type:\"SET_USER\",\r\n                user:result.user,\r\n            })\r\n        }).catch(error=>alert(error.message));\r\n    }\r\n    return (\r\n        <div className='login'>\r\n            <div className='login__container'>\r\n                <img src=\"https://cdn.pixabay.com/photo/2012/04/11/15/57/speech-28654__480.png\" alt=\"login\"/>\r\n                <div className='login__text'>\r\n                    <h1>Whooo Hooo !!</h1>\r\n                    <h2>Thanks for being here </h2>\r\n                    <h3>Please Sign-In first to connect with friends.....</h3>\r\n                </div>\r\n                <Button type=\"submit\" onClick={signIn}>\r\n                    Sign-In with Google\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React ,{useEffect}from 'react'\r\nimport \"./App.css\";\r\nimport Sidebar from './Sidebar';\r\nimport Chat from './Chat';\r\nimport {BrowserRouter as Router ,Routes,Route} from 'react-router-dom' ;\r\nimport Login from './Login';\r\nimport { useStateValue } from './StateProvider';\r\nimport { onAuthStateChanged } from 'firebase/auth';\r\nimport { auth } from './firebase';\r\n\r\nfunction App() {\r\n\r\n    //const[state,dispatch] hota , hm seedhe destructor krke 'state object' me se user nikal rhe bss;\r\n    const[{user},dispatch]=useStateValue();//pulling user from our created data layer if exist\r\n\r\n\r\n    //this helps in preventing logging again and again on every refresh or start-up (if user ne already login kr rkha hoga toh cache me user hoga hi , thus dubara login na kraye)\r\n    useEffect(() => {\r\n       onAuthStateChanged(auth,(user)=>{\r\n           dispatch({\r\n               type:\"SET_USER\",\r\n               user:user,\r\n           })\r\n       })\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"app\">\r\n        {/* if there is user then show whole app else show login page */}\r\n        {!user?(<Login/>):\r\n        (\r\n            <>\r\n            <div className=\"app__body\">\r\n                <Router>\r\n                    <Sidebar/>\r\n                    <Routes>\r\n                        <Route path=\"/room/:roomId\" element={<Chat/>}></Route>\r\n                        <Route path=\"/\" element={<Chat/>}></Route>\r\n                    </Routes>\r\n                </Router>\r\n            </div>\r\n\r\n            <div className='app__info'>\r\n                <div className='app__NameInfo'>\r\n                🔗 CONNECT 🔗\r\n                </div>\r\n                \r\n                <div className='app__middleSpace'></div>\r\n\r\n                <div className='app__developerInfo'>\r\n                Made with ❤️ ~ by RATNESH MAURYA :-)\r\n                </div>\r\n            </div>\r\n            \r\n            </>     \r\n        )   \r\n        }   \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","\r\n//when user not logged in\r\nexport const initialState={\r\n    user:null\r\n}\r\n\r\n// //when we sign in go ahead and push this user in data layer(that we have created for contexting)\r\n// export const actionTypes={\r\n//     SET_USER:\"SET_USER\",\r\n// };\r\n\r\n//now checking what action is being performed\r\nconst reducer=(state,action)=>{\r\n    switch(action.type){\r\n\r\n        //if action is of setting user , i.e first login\r\n        case \"SET_USER\":{\r\n            return{\r\n\r\n                //keep the state of data layer as it is , just change the user\r\n                ...state,\r\n                user:action.user,\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nimport reducer,{initialState} from \"./Reducer\";\nimport {StateProvider} from \"./StateProvider\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <StateProvider initialState={initialState} reducer={reducer}>\n            <App/>\n        </StateProvider>\n    </React.StrictMode>\n,document.getElementById('root'));"],"sourceRoot":""}